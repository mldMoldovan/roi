#!/bin/bash

_launch=false

_help(){

 printf "\n"
 printf "Kolya - React Wizard\n"
 printf "\n"
 printf "Usage:  kolya [-vh] <filepath> [-css | -react] [-oek]\n"
 printf "\n"
 printf "Options: -v - Show version info\n"
 printf "         -h - Show help menu\n"
 printf "         -o - Open file \n"
 printf "         -css | -react - Setup output syntax\n"
 printf "         -d - Detect file syntax\n"
 printf "         -e - Update file extension\n"
 printf "         -k - Keep old file\n"
 printf "\n"
 printf "Examples: kolya style.js -css -o\n"
 printf "          kolya style.css -react -oek\n"
 printf "          kolya -v\n"
 printf "\n"

}

_miniHelp(){

 printf "Usage:  kolya [-vh] <filepath> [-css | -react] [-oek]\n"
 printf "\n"
 printf "Options: -v - Show version info\n"
 printf "         -h - Show help menu\n"
 printf "         -o - Open file \n"
 printf "         -css | -react - Setup output syntax\n"
 printf "         -e - Update file extension\n"
 printf "         -k - Keep old file\n"
 printf "\n"

}

_update(){

    sudo chmod +x kolya
    sudo cp kolya /usr/local/bin/


}


_react(){
      cp $1 temp.slz

      # position

      sed -i -e 's/position: static/position: absolute/g' $1
      sed -i -e 's/position: fixed/position: absolute/g' $1
      sed -i -e 's/position: sticky/position: absolute/g' $1
      sed -i -e 's/position: initial/position: absolute/g' $1
      sed -i -e 's/position: inherit/position: absolute/g' $1

      # display

      sed -i -e 's/display: block/display: flex/g' $1
      sed -i -e 's/display: contents/display: flex/g' $1
      sed -i -e 's/display: grid/display: flex/g' $1
      sed -i -e 's/display: inline-block/display: flex/g' $1
      sed -i -e 's/display: inline-flex/display: flex/g' $1
      sed -i -e 's/display: inline-grid/display: flex/g' $1
      sed -i -e 's/display: inline-table/display: flex/g' $1
      sed -i -e 's/display: inline/display: flex/g' $1
      sed -i -e 's/display: list-item/display: flex/g' $1
      sed -i -e 's/display: run-in/display: flex/g' $1
      sed -i -e 's/display: table/display: flex/g' $1
      sed -i -e 's/display: table-caption/display: flex/g' $1
      sed -i -e 's/display: table-column-group/display: flex/g' $1
      sed -i -e 's/display: table-header-group/display: flex/g' $1
      sed -i -e 's/display: table-footer-group/display: flex/g' $1
      sed -i -e 's/display: table-row-group/display: flex/g' $1
      sed -i -e 's/display: table-cell/display: flex/g' $1
      sed -i -e 's/display: table-column/display: flex/g' $1
      sed -i -e 's/display: table-row/display: flex/g' $1
      sed -i -e 's/display: initial/display: flex/g' $1
      sed -i -e 's/display: inherit/display: flex/g' $1

      sed -i -e 's/text-transform/textTransform/g' $1

      sed -i -e 's/!important//g' $1
      sed -i -e 's/border-right-width/borderRightWidth/g' $1
      sed -i -e 's/border-left-width/borderLeftWidth/g' $1
      sed -i -e 's/border-width/borderWidth/g' $1
      sed -i -e 's/border-top-width/borderTopWidth/g' $1
      sed -i -e 's/border-bottom-width/borderBottomWidth/g' $1
      sed -i -e 's/border-radius/borderRadius/g' $1
      sed -i -e 's/flex-wrap/flexWrap/g' $1
      sed -i -e 's/justify-content/jusityContent/g' $1
      sed -i -e 's/margin-bottom/marginBottom/g' $1
      sed -i -e 's/margin-left/marginLeft/g' $1
      sed -i -e 's/margin-right/marginRight/g' $1
      sed -i -e 's/margin-top/marginTop/g' $1
      sed -i -e 's/max-height/maxHeight/g' $1
      sed -i -e 's/max-width/maxWidth/g' $1
      sed -i -e 's/min-height/minHeight/g' $1
      sed -i -e 's/min-width/minWidth/g' $1
      sed -i -e 's/padding-bottom/paddingBottom/g' $1
      sed -i -e 's/padding-left/paddingLeft/g' $1
      sed -i -e 's/padding-right/paddingRight/g' $1
      sed -i -e 's/padding-top/paddingTop/g' $1
      sed -i -e 's/z-index/zIndex/g' $1
      sed -i -e 's/align-items/alignItems/g' $1
      sed -i -e 's/align-self/alignSelf/g' $1
      sed -i -e 's/background-color/backgroundColor/g' $1
      sed -i -e 's/font-family/fontFamily/g' $1
      sed -i -e 's/font-weight/fontWeight/g' $1
      sed -i -e 's/font-size/fontSize/g' $1
      sed -i -e 's/font-variant/fontVariant/g' $1
      sed -i -e 's/font-style/fontStyle/g' $1
      sed -i -e 's/line-height/lineHeight/g' $1
      sed -i -e 's/direction/writingDirection/g' $1
      sed -i -e 's/letter-spacing/letterSpacing/g' $1
      sed -i -e 's/text-align/textAlign/g' $1
      sed -i -e 's/align-self/alignSelf/g' $1
      sed -i -e 's/align-items/alignItems/g' $1
      sed -i -e 's/;/,/g' $1
      sed -i -e 's/ {/: {/g' $1
      sed -i -e 's/}/},/g' $1
      sed -i -e 's/px//g' $1
      rm $1-e
      printf "Succesfully converted CSS to React Native Style\n"
}

_css(){

      cp $1 temp.slz
      sed -i -e 's/textTransform/text-transform/g' $1
      sed -i -e 's/borderRightWidth/border-right-width/g' $1
      sed -i -e 's/borderLeftWidth/border-left-width/g' $1
      sed -i -e 's/borderWidth/border-width/g' $1
      sed -i -e 's/borderTopWidth/border-top-width/g' $1
      sed -i -e 's/borderBottomWidth/border-bottom-width/g' $1
      sed -i -e 's/borderRadius/border-radius/g' $1
      sed -i -e 's/flexWrap/flex-wrap/g' $1
      sed -i -e 's/justifyContent/jusity-content/g' $1
      sed -i -e 's/marginBottom/margin-bottom/g' $1
      sed -i -e 's/marginLeft/margin-left/g' $1
      sed -i -e 's/marginRight/margin-right/g' $1
      sed -i -e 's/marginTop/margin-top/g' $1
      sed -i -e 's/maxHeight/max-height/g' $1
      sed -i -e 's/maxWidth/max-width/g' $1
      sed -i -e 's/minHeight/min-height/g' $1
      sed -i -e 's/minWidth/min-width/g' $1
      sed -i -e 's/paddingBottom/padding-bottom/g' $1
      sed -i -e 's/paddingLeft/padding-left/g' $1
      sed -i -e 's/paddingRight/padding-right/g' $1
      sed -i -e 's/paddingTop/padding-top/g' $1
      sed -i -e 's/zIndex/z-index/g' $1
      sed -i -e 's/alignItems/align-items/g' $1
      sed -i -e 's/alignSelf/align-self/g' $1
      sed -i -e 's/backgroundColor/background-color/g' $1
      sed -i -e 's/fontFamily/font-family/g' $1
      sed -i -e 's/fontWeight/font-weight/g' $1
      sed -i -e 's/fontSize/font-size/g' $1
      sed -i -e 's/fontVariant/font-variant/g' $1
      sed -i -e 's/fontStyle/font-style/g' $1
      sed -i -e 's/lineHeight/line-height/g' $1
      sed -i -e 's/writingDirection/direction/g' $1
      sed -i -e 's/letterSpacing/letter-spacing/g' $1
      sed -i -e 's/textAlign/text-align/g' $1
      sed -i -e 's/alignSelf/align-self/g' $1
      sed -i -e 's/alignItems/align-items/g' $1
      sed -i -e 's/},/}/g' $1
      sed -i -e 's/,/;/g' $1
      sed -i -e 's/: {/ {/g' $1
      rm $1-e
      printf "Succesfully converted React Native Style to CSS\n"

}


_jsx(){

     sed -i -e 's/div/View/g' $1
     sed -i -e 's/span/Text/g' $1
     rm $1-e

}



_rjs(){

    sed -i -e 's/View/div/g' $1
    sed -i -e 's/Text/span/g' $1
    rm $1-e

}


_cleanReact(){

      if [ "$2" == "-o" ]; then

              rm temp.slz
              cat $1

         elif [[ "$2" == "-oe" ]]; then

              rm temp.slz
              _new=$(echo $1 | sed -e "s/.css/.js/g")
              mv $1 "$_new"
              cat $_new

         elif [[ "$2" == "-e" ]]; then

              rm temp.slz
              _new=$(echo "$1" | sed -e "s/.css/.js/g")
              mv $1 "$_new"

         elif [[ "$2" == "-ek" ]]; then

              _new=$(echo "$1" | sed -e "s/.css/.js/g")
              mv $1 "$_new"
              mv temp.slz $1

         elif [[ "$2" == "-oek" ]]; then

              _new=$(echo "$1" | sed -e "s/.css/.js/g")
              mv $1 "$_new"
              mv temp.slz $1
              cat "$_new"

         fi
}

_cleanCss(){

         if [ "$2" == "-o" ]; then

            rm temp.slz
            cat $1

         elif [[ "$2" == "-oe" ]]; then

            rm temp.slz
            _new=$(echo $1 | sed -e "s/.js/.css/g")
            mv $1 "$_new"
            cat $_new

         elif [[ "$2" == "-e" ]]; then

            rm temp.slz
            _new=$(echo $1 | sed -e "s/.js/.css/g")
            mv $1 "$_new"

         elif [[ "$2" == "-ek" ]]; then

            _new=$(echo $1 | sed -e "s/.js/.css/g")
            mv $1 "$_new"
            mv temp.slz $1

         elif [[ "$2" == "-oek" ]]; then

            _new=$(echo $1 | sed -e "s/.js/.css/g")
            mv $1 "$_new"
            mv temp.slz $1
            cat "$_new"

         fi

}

_checkValidOptions(){


         if [ "$1" == "-o" ]; then

            _launch=true

         elif [[ "$1" == "-oe" ]]; then

            _launch=true

         elif [[ "$1" == "-e" ]]; then

            _launch=true

         elif [[ "$1" == "-ek" ]]; then

            _launch=true

         elif [[ "$1" == "-oek" ]]; then

            _launch=true

         else

             _noOptions

         fi

}

_noOptions(){

  printf "\n"
	printf "No valid option used - Try Again\n"
	_miniHelp

}


_version(){

  printf "\n"
  printf "         Kolya - React Wizard\n"
  printf "            Version  0.2.3                 \n"
  printf "\n"

}

_noArg(){

  printf "\n"
  printf "No arguments specified"
  printf "\n"
  _miniHelp

}


_checkOS(){

  _system="$(uname -s)"

  if [ "$_system" == "Darwin" ]; then
    printf "Wonderful, a Macintosh, the best virtual environment\n"
    printf "Preparing to inject dependencies...\n"
     _unload
  elif [[ "$_system" == "Linux" ]]; then
     printf "React Native development is not supported on Linux\n"
  elif [[ "$_system" == "Haiku" ]]; then
     printf "React Native development is not supported on Haiku\n"
  elif [[ "$_system" == "BSD" ]]; then
     printf "React Native development is not supported on BSD\n"
  elif [[ "$_system" == "Minix" ]]; then
     printf "React Native development is not supported on Minix\n"
  else
     printf "React Native development is not supported on WTF is this Windows?\n"
  fi

}

_unload(){

  brew install node
  brew install npm
  brew install react-native-cli
  brew cask install reactotron

}


#
#   MAIN
#

if [ "$1" == "-v" ]; then

 # VERSION MENU -V FLAG
   _version


elif [[ "$1" == "-h" ]]; then

   _help

# NO VERSION OR HELP SO WE BOOT KOLYA NORMALLY
elif [[ "$1" == "--update" ]]; then

   _update

elif [[ "$1" == "--install" ]]; then

   _update

elif [[ "$1" == "--upgrade" ]]; then

  _update

elif [[ "$1" == "--reinstall" ]]; then

  _update

elif [[ "$1" == "-help" ]]; then

   _help

elif [[ "$1" == "-unload" ]]; then

   _checkOS

elif [[ "$1" == "--unload" ]]; then

   _checkOS

else



   if [ "$2" == "-react" ]; then

   	_checkValidOptions $3

   	if [ "$_launch" == true ]; then

            _react $1

            _cleanReact $1 $3

        fi

   elif [[ "$2" == "-css" ]]; then

         _checkValidOptions $3

   	    if [ "$_launch" == true ]; then

            _css $1

            _cleanCss $1 $3

        fi

   elif [[ "$2" == "-jsx" ]]; then

          _checkValidOptions $3

          if [ "$_launch" == true ]; then

            _jsx $1

          fi


   elif [[ "$2" == "-web" ]]; then

          _checkValidOptions

          if [ "$_launch" == true ]; then

            _rjs $1

          fi

   else

   _noArg

   fi
fi
